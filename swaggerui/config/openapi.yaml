openapi: 3.0.0
servers:
  - url: 'http://localhost:8000/api/config'
info:
  description: >-
    This is the config OpenAPI definition.
  version: 1.0.0
  title: Config OpenAPI
tags:
  - name: config
  - name: authentication
  - name: wallet
  - name: api-key
  - name: logging
paths:
  /config:
    get:
      tags:
        - config
      summary: Get the configuration
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: authorization
          schema:
            type: string
      operationId: getConfig
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponseDto'

  /login:
    post:
      tags:
        - authentication
      summary: Authenticate to chaingate
      operationId: login
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponseDto'
        '403':
          description: wrong username or password
      requestBody:
        $ref: '#/components/requestBodies/LoginRequestDto'

  /register:
    post:
      tags:
        - authentication
      summary: Merchant registration
      operationId: registerMerchant
      responses:
        '201':
          description: new merchant registred
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequestDto'

  /verifyemail:
    get:
      tags:
        - authentication
      summary: Verify merchant email
      operationId: verifyEmail
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
        - in: query
          name: code
          schema:
            type: integer
            format: int64
          required: true
          description: Email verification code
      responses:
        '200':
          description: successful operation
        '400':
          description: email or verification code invalid

  /wallet:
    get:
      tags:
        - wallet
      summary: get wallets
      operationId: getWallets
      security:
        - bearerAuth: []
      parameters:
       - in: query
         name: mode
         required: true
         schema:
           type: string
           enum:
            - test
            - main
       - in: header
         name: authorization
         schema:
           type: string
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WalletResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - wallet
      summary: add new wallet address
      operationId: addWallet
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: authorization
          schema:
            type: string
      responses:
        '201':
          description: new wallet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/WalletRequestDto'

  /wallet/{id}:
    delete:
      tags: 
        - wallet
      summary: delete wallet
      operationId: deleteWallet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: authorization
          schema:
            type: string
      security:
        - bearerAuth: []
      responses: 
        '200':
          description: wallet deleted
        '400':
          description: wallet does not exist
        '401':
          $ref: '#/components/responses/UnauthorizedError'
          
          
  /apikey:
    get:
      tags:
        - api-key
      summary: gets the api key
      operationId: getApiKey
      parameters:
        - in: query
          name: mode
          required: true
          schema: 
            type: string
            enum:
              - test
              - main
        - in: header
          name: authorization
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: return
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - api-key
      summary: create new secret api key
      operationId: generateApiKey
      parameters:
        - in: header
          name: authorization
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        '201':
          description: API key generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        $ref: '#/components/requestBodies/ApiKeyRequestDto'

  /apiKey/{id}:
    delete:
      tags:
        - api-key
      summary: delete api key
      operationId: deleteApiKey
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: authorization
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: api key deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /logging:
    get:
      tags:
        - logging
      summary: get logging information
      operationId: getLoggingInformation
      parameters:
        - in: query
          name: mode
          required: true
          schema: 
            type: string
            enum:
              - test
              - main
        - in: header
          name: authorization
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoggingResponseDto'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  requestBodies:
    LoginRequestDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequestDto'
    RegisterRequestDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterRequestDto'
    WalletRequestDto:
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/WalletRequestDto'
    ApiKeyRequestDto:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeyRequestDTO'
  schemas:
    ConfigResponseDto:
      title: Config Response DTO
      type: object
      properties:
        supportedCryptoCurrencies:
          type: array
          items:
            $ref: '#/components/schemas/currency'
    LoginRequestDto:
      title: Login Request DTO
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: my@email.ch
        password:
          type: string
          example: my-secret-password
    TokenResponseDto:
      title: Token Response DTO
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: example-jwt-token
    RegisterRequestDto:
      title: Register Request DTO
      type: object
      required: 
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    WalletResponseDto:
      title: Wallet Response DTO
      type: object
      required:
        - id
        - currency
        - address
        - mode
      properties:
        id:
          type: string
          format: uuid
        currency:
          type: string
          enum:
            - eth
            - btc
        address:
          type: string
        mode:
          type: string
          enum:
            - test
            - main
    WalletRequestDto:
      title: Wallet Request DTO
      type: object
      required:
        - currency
        - address
        - mode
      properties:
        currency:
          type: string
          enum:
            - eth
            - btc
        address:
          type: string
        mode:
          type: string
          enum:
            - test
            - main
    ApiKeyResponseDto:
      title: Api Key Response DTO
      type: object
      required:
        - id
        - key
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
        createdAt:
          type: string
          format: date-time
    ApiKeyRequestDTO:
      title: Api Key Request Dto
      type: object
      required:
        - mode
      properties:
        mode:
          type: string
          enum:
            - test
            - main
    LoggingResponseDto:
      title: Logging Informations Response DTO
      type: object
      required:
        - paymentId
        - callbackUrl
        - createdAt
        - updatedAt
        - mode
        - history
      properties:
        paymentId:
          type: string
          format: uuid
        callbackUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        mode:
          type: string
          enum:
            - main
            - test
        transaction:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/PaymentHistory'
    PaymentHistory:
      title: Payment History
      type: object
      required:
        - id
        - payAddress
        - priceAmount
        - priceCurrency
        - payAmount
        - payCurrency
        - actuallyPaid
        - paymentState
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        payAddress:
          type: string
        priceAmount:
          type: number
          format: double
        priceCurrency:
          type: string
          enum:
            - usd
            - chf
        payAmount:
          type: string
        payCurrency:
          type: string
          enum:
            - eth
            - btc
        actuallyPaid:
          type: string
        paymentState:
          type: string
          enum:
            - currency_selection
            - waiting
            - partially_paid 
            - paid
            - confirmed
            - forwarded
            - finished
            - expired
            - failed
        createdAt:
          type: string
          format: date-time
    currency:
      title: Currency
      type: object
      properties:
        name:
          type: string
        shortName:
          type: string
        conversionFactor:
          type: string