/*
 * Config OpenAPI
 *
 * This is the config OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package configService

import (
	"CHainGate/backend/configApi"
	"CHainGate/backend/database"
	"CHainGate/backend/models"
	"context"
	"crypto/rand"
	"errors"
	"golang.org/x/crypto/bcrypt"
	"math/big"
	"net/http"
	"time"
)

// AuthenticationApiService is a service that implements the logic for the AuthenticationApiServicer
// This service should implement the business logic for every endpoint for the AuthenticationApi API.
// Include any external packages or services that will be required by this service.
type AuthenticationApiService struct {
}

// NewAuthenticationApiService creates a default api service
func NewAuthenticationApiService() configApi.AuthenticationApiServicer {
	return &AuthenticationApiService{}
}

// Login - Authenticate to chaingate
func (s *AuthenticationApiService) Login(ctx context.Context, login configApi.Login) (configApi.ImplResponse, error) {
	// TODO - update Login with the required logic for this service method.
	// Add api_authentication_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Token{}) or use other options such as http.Ok ...
	//return Response(200, Token{}), nil

	//TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	//return Response(403, nil),nil

	return configApi.Response(http.StatusNotImplemented, nil), errors.New("Login method not implemented")
}

// Logout - Logs out the user
func (s *AuthenticationApiService) Logout(ctx context.Context) (configApi.ImplResponse, error) {
	// TODO - update Logout with the required logic for this service method.
	// Add api_authentication_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return configApi.Response(http.StatusNotImplemented, nil), errors.New("Logout method not implemented")
}

// RegisterUser - User registration
func (s *AuthenticationApiService) RegisterUser(ctx context.Context, register configApi.Register) (configApi.ImplResponse, error) {
	//TODO: maybe use password validator https://github.com/wagslane/go-password-validator
	password, err := bcrypt.GenerateFromPassword([]byte(register.Password), bcrypt.DefaultCost)
	if err != nil {
		return configApi.Response(http.StatusInternalServerError, nil), errors.New("Cannot register user ")
	}

	// generate random verification code with 6 digits
	max := big.NewInt(1000000)
	min := big.NewInt(100000)
	verificationCode, err := rand.Int(rand.Reader, max.Sub(max, min))
	if err != nil {
		return configApi.Response(http.StatusInternalServerError, nil), errors.New("Cannot generate verification code ")
	}
	verificationCode.Add(verificationCode, min)

	// insert to db
	emailVerification := models.EmailVerification{
		VerificationCode: verificationCode.Uint64(),
		CreatedAt:        time.Now(),
	}

	user := models.User{
		FirstName:         register.FirstName,
		LastName:          register.LastName,
		Email:             register.Email,
		Password:          password,
		EmailVerification: emailVerification,
		IsActive:          false,
		CreatedAt:         time.Now(),
	}

	result := database.DB.Create(&user)
	if result.Error.Error() == "ERROR: duplicate key value violates unique constraint \"users_email_key\" (SQLSTATE 23505)" {
		return configApi.Response(http.StatusBadRequest, nil), errors.New("E-Mail already exists")
	}

	if result.Error != nil {
		return configApi.Response(http.StatusInternalServerError, nil), errors.New("Cannot register user ")
	}

	// send email

	//TODO: Uncomment the next line to return response Response(201, {}) or use other options such as http.Ok ...
	//return Response(201, nil),nil

	return configApi.Response(http.StatusNotImplemented, nil), errors.New("RegisterUser method not implemented")
}

// VerifyEmail - Verify user email
func (s *AuthenticationApiService) VerifyEmail(ctx context.Context, email string, verificationCode int32) (configApi.ImplResponse, error) {
	// TODO - update VerifyEmail with the required logic for this service method.
	// Add api_authentication_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	return configApi.Response(http.StatusNotImplemented, nil), errors.New("VerifyEmail method not implemented")
}
