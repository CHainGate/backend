/*
 * Public OpenAPI
 *
 * This is the public OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package publicService

import (
	"context"
	"errors"
	"net/http"
	"strings"

	"github.com/CHainGate/backend/internal/database"
	"github.com/CHainGate/backend/internal/models"
	"github.com/CHainGate/backend/internal/utils"
	"github.com/CHainGate/backend/publicApi"
)

// PaymentApiService is a service that implements the logic for the PaymentApiServicer
// This service should implement the business logic for every endpoint for the PaymentApi API.
// Include any external packages or services that will be required by this service.
type PaymentApiService struct {
}

// NewPaymentApiService creates a default api service
func NewPaymentApiService() publicApi.PaymentApiServicer {
	return &PaymentApiService{}
}

// NewPayment - Create a new payment
func (s *PaymentApiService) NewPayment(_ context.Context, xAPIKEY string, paymentRequestDto publicApi.PaymentRequestDto) (publicApi.ImplResponse, error) {
	// only user data without preload, if needed add preload
	user, err := verifyApiKeyAuthentication(xAPIKEY)
	if err != nil {
		if err.Error() == "not authorized" {
			return publicApi.Response(http.StatusForbidden, nil), err
		}
		return publicApi.Response(http.StatusInternalServerError, nil), err
	}

	// TODO: create blockchain call

	// TODO: save payment to db

	// TODO: map data to dto object

	return publicApi.Response(http.StatusNotImplemented, user), nil
}

func verifyApiKeyAuthentication(receivedApiKey string) (*models.User, error) {
	decryptedApiKey, err := utils.Decrypt([]byte(utils.Opts.ApiKeySecret), receivedApiKey)
	if err != nil {
		return nil, err
	}

	apiKeyDetails := strings.Split(decryptedApiKey, "_")
	apiKeyId := apiKeyDetails[0]
	apiKeySecret := apiKeyDetails[1]

	var databaseApiKey models.ApiKey
	// TODO: refactor to userRepository
	result := database.DB.Where("id = ?", apiKeyId).Find(&databaseApiKey)
	if result.Error != nil {
		return nil, err
	}

	apiKeyMode, ok := utils.ParseStringToApiKeyTypeEnum(databaseApiKey.KeyType)
	if !ok {
		return nil, errors.New("Wrong api key mode ")
	}

	if apiKeyMode == utils.Secret {
		encryptedKey, err := utils.ScryptPassword(apiKeySecret, databaseApiKey.Salt)
		if err != nil {
			return nil, err
		}

		if encryptedKey != databaseApiKey.SecretKey {
			return nil, errors.New("not authorized")
		}
	}

	if apiKeyMode == utils.Public {
		if apiKeySecret != databaseApiKey.SecretKey {
			return nil, errors.New("not authorized")
		}
	}

	var user models.User
	// TODO: refactor to userRepository
	result = database.DB.Where("id = ?", databaseApiKey.UserId).Find(&user)
	if result.Error != nil {
		return nil, err
	}

	return &user, nil
}
