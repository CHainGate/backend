/*
 * Public OpenAPI
 *
 * This is the public OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package publicService

import (
	"context"
	"crypto/hmac"
	"crypto/sha512"
	"encoding/hex"
	"errors"
	"github.com/CHainGate/backend/internal/database"
	"github.com/CHainGate/backend/internal/models"
	"github.com/CHainGate/backend/internal/utils"
	"github.com/CHainGate/backend/publicApi"
	"io"
	"net/http"
)

// PaymentApiService is a service that implements the logic for the PaymentApiServicer
// This service should implement the business logic for every endpoint for the PaymentApi API.
// Include any external packages or services that will be required by this service.
type PaymentApiService struct {
}

// NewPaymentApiService creates a default api service
func NewPaymentApiService() publicApi.PaymentApiServicer {
	return &PaymentApiService{}
}

// NewPayment - Create a new payment
func (s *PaymentApiService) NewPayment(ctx context.Context, xAPIKEY string, paymentRequestDto publicApi.PaymentRequestDto) (publicApi.ImplResponse, error) {
	mac := hmac.New(sha512.New, []byte(utils.Opts.ApiKeySecret))
	_, err := io.WriteString(mac, xAPIKEY)
	if err != nil {

	}
	hashedKey := mac.Sum(nil)

	var key models.ApiKey
	result := database.DB.Where("encrypted_key = ?", hex.EncodeToString(hashedKey)).Find(&key)
	if result.RowsAffected == 0 {
		return publicApi.Response(http.StatusForbidden, nil), errors.New("no authorization")
	}

	// TODO: create blockchain call

	// TODO: save payment to db

	// TODO: map data to dto object

	return publicApi.Response(http.StatusNotImplemented, key), nil
}
