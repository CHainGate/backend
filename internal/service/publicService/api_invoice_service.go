/*
 * Public OpenAPI
 *
 * This is the public OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package publicService

import (
	"context"
	"net/http"

	"github.com/CHainGate/backend/internal/model"
	"github.com/CHainGate/backend/internal/repository"
	"github.com/CHainGate/backend/internal/service"
	"github.com/CHainGate/backend/internal/utils"
	"github.com/CHainGate/backend/pkg/enum"
	"github.com/CHainGate/backend/publicApi"
	"github.com/google/uuid"
)

// InvoiceApiService is a service that implements the logic for the InvoiceApiServicer
// This service should implement the business logic for every endpoint for the InvoiceApi API.
// Include any external packages or services that will be required by this service.

type InvoiceApiService struct {
	authenticationService service.IAuthenticationService
	publicApiService      service.IPublicPaymentService
	merchantRepository    repository.IMerchantRepository
}

// NewInvoiceApiService creates a default api service
func NewInvoiceApiService(
	publicApiService service.IPublicPaymentService,
	authenticationService service.IAuthenticationService,
	merchantRepository repository.IMerchantRepository,
) publicApi.InvoiceApiServicer {
	return &InvoiceApiService{authenticationService, publicApiService, merchantRepository}
}

// NewInvoice - Create a new invoice
func (s *InvoiceApiService) NewInvoice(ctx context.Context, xAPIKEY string, invoiceRequestDto publicApi.InvoiceRequestDto) (publicApi.ImplResponse, error) {
	merchant, apiKey, err := s.authenticationService.HandleApiAuthentication(xAPIKEY)
	if err != nil {
		if err.Error() == "not authorized" {
			return publicApi.Response(http.StatusForbidden, nil), err
		}
		return publicApi.Response(http.StatusInternalServerError, nil), err
	}

	priceCurrency, ok := enum.ParseStringToFiatCurrencyEnum(invoiceRequestDto.PriceCurrency)
	if !ok {
	}

	initialState := model.PaymentState{
		PaymentState: enum.CurrencySelection,
		PayAmount:    model.NewBigIntFromInt(0),
		ActuallyPaid: model.NewBigIntFromInt(0),
	}

	payment := model.Payment{
		Mode:           apiKey.Mode,
		PriceAmount:    invoiceRequestDto.PriceAmount,
		PriceCurrency:  priceCurrency,
		PayCurrency:    enum.NOT_SELECTED,
		PaymentStates:  []model.PaymentState{initialState},
		CallbackUrl:    invoiceRequestDto.CallbackUrl,
		SuccessPageUrl: invoiceRequestDto.SuccessPageUrl,
		FailurePageUrl: invoiceRequestDto.FailurePageUrl,
	}
	payment.ID = uuid.New()

	merchant.Payments = append(merchant.Payments, payment)
	err = s.merchantRepository.Update(merchant)
	if err != nil {
		return publicApi.Response(http.StatusInternalServerError, nil), err
	}

	paymentResponseDto := publicApi.InvoiceResponseDto{
		Id:             payment.ID.String(),
		PayAddress:     payment.PayAddress,
		PriceAmount:    payment.PriceAmount,
		PriceCurrency:  payment.PriceCurrency.String(),
		ActuallyPaid:   payment.PaymentStates[0].ActuallyPaid.String(),
		CallbackUrl:    payment.CallbackUrl,
		SuccessPageUrl: payment.SuccessPageUrl,
		FailurePageUrl: payment.FailurePageUrl,
		InvoiceUrl:     utils.Opts.PaymentBaseUrl + payment.ID.String(),
		PaymentState:   payment.PaymentStates[0].PaymentState.String(),
		CreatedAt:      payment.CreatedAt,
		UpdatedAt:      payment.UpdatedAt,
	}
	return publicApi.Response(http.StatusCreated, paymentResponseDto), nil
}
