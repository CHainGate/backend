/*
 * Config OpenAPI
 *
 * This is the config OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package configService

import (
	"context"
	"errors"
	"github.com/CHainGate/backend/internal/repository"
	"net/http"

	"github.com/CHainGate/backend/configApi"
	"github.com/CHainGate/backend/internal/models"
	"github.com/CHainGate/backend/internal/utils"
)

// ApiKeyApiService is a service that implements the logic for the ApiKeyApiServicer
// This service should implement the business logic for every endpoint for the ApiKeyApi API.
// Include any external packages or services that will be required by this service.
type ApiKeyApiService struct {
}

// NewApiKeyApiService creates a default api service
func NewApiKeyApiService() configApi.ApiKeyApiServicer {
	return &ApiKeyApiService{}
}

// DeleteApiKey - delete api key
func (s *ApiKeyApiService) DeleteApiKey(_ context.Context, apiKeyId string, authorization string) (configApi.ImplResponse, error) {
	user, err := checkAuthorizationAndReturnUser(authorization, repository.UserRepo)
	if err != nil {
		return configApi.Response(http.StatusForbidden, nil), errors.New("not authorized")
	}

	err = repository.ApiKeyRepo.DeleteApiKey(user.Id, apiKeyId)
	if err != nil {
		return configApi.Response(http.StatusBadRequest, nil), err
	}
	return configApi.Response(http.StatusNoContent, nil), nil
}

// GenerateApiKey - create new secret api key
func (s *ApiKeyApiService) GenerateApiKey(_ context.Context, authorization string, apiKeyRequestDto configApi.ApiKeyRequestDto) (configApi.ImplResponse, error) {
	user, err := checkAuthorizationAndReturnUser(authorization, repository.UserRepo)
	if err != nil {
		return configApi.Response(http.StatusForbidden, nil), errors.New("not authorized")
	}

	mode, ok := utils.ParseStringToModeEnum(apiKeyRequestDto.Mode)
	if !ok {
		return configApi.Response(http.StatusBadRequest, nil), errors.New("mode does not exist")
	}

	apiKeyType, ok := utils.ParseStringToApiKeyTypeEnum(apiKeyRequestDto.KeyType)
	if !ok {
		return configApi.Response(http.StatusForbidden, nil), errors.New("api key type does not exist")
	}

	var key *models.ApiKey

	apiSecretKey, err := utils.GenerateApiKey()
	if err != nil {
		return configApi.Response(http.StatusInternalServerError, nil), err
	}

	var combinedApiKey string
	if apiKeyType == utils.Secret {
		key, combinedApiKey, err = handleSecretApiKey(apiSecretKey, mode, apiKeyType)
		if err != nil {
			return configApi.Response(http.StatusInternalServerError, nil), err
		}
	}

	if apiKeyType == utils.Public {
		key, err = handlePublicApiKey(apiSecretKey, mode, apiKeyType)
		if err != nil {
			return configApi.Response(http.StatusInternalServerError, nil), err
		}
	}

	user.ApiKeys = append(user.ApiKeys, *key)
	err = repository.UserRepo.UpdateUser(user)
	if err != nil {
		return configApi.Response(http.StatusInternalServerError, nil), errors.New("User could not be updated ")
	}

	apiKeyDto := configApi.ApiKeyResponseDto{
		Id:        key.Id.String(),
		KeyType:   key.KeyType,
		CreatedAt: key.CreatedAt,
		Key:       key.ApiKey,
	}

	if apiKeyType == utils.Secret {
		apiKeyDto.Key = combinedApiKey
	}

	return configApi.Response(http.StatusCreated, apiKeyDto), nil
}

// GetApiKey - gets the api key
func (s *ApiKeyApiService) GetApiKey(_ context.Context, mode string, keyType string, authorization string) (configApi.ImplResponse, error) {
	user, err := checkAuthorizationAndReturnUser(authorization, repository.UserRepo)
	if err != nil {
		return configApi.Response(http.StatusForbidden, nil), errors.New("not authorized")
	}

	enumMode, ok := utils.ParseStringToModeEnum(mode)
	if !ok {
		return configApi.Response(http.StatusBadRequest, nil), errors.New("mode does not exist")
	}

	enumApiKeyType, ok := utils.ParseStringToApiKeyTypeEnum(keyType)
	if !ok {
		return configApi.Response(http.StatusBadRequest, nil), errors.New("api key type does not exist")
	}

	keys, err := repository.ApiKeyRepo.FindApiKeyByUserModeKeyType(user.Id, enumMode, enumApiKeyType)
	if err != nil {
		return configApi.Response(http.StatusInternalServerError, nil), err
	}

	var resultList []configApi.ApiKeyResponseDto
	for _, item := range keys {
		resultList = append(resultList, configApi.ApiKeyResponseDto{
			Id:        item.Id.String(),
			Key:       item.ApiKey,
			KeyType:   item.KeyType,
			CreatedAt: item.CreatedAt,
		})
	}

	return configApi.Response(http.StatusOK, resultList), nil
}
