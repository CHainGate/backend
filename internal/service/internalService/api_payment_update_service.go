/*
 * internal OpenAPI
 *
 * This is the internal OpenAPI definition.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package internalService

import (
	"context"
	"crypto/hmac"
	"crypto/sha512"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/CHainGate/backend/internalApi"
	"github.com/CHainGate/backend/proxyClientApi"
	"io"
	"net/http"
)

// PaymentUpdateApiService is a service that implements the logic for the PaymentUpdateApiServicer
// This service should implement the business logic for every endpoint for the PaymentUpdateApi API.
// Include any external packages or services that will be required by this service.
type PaymentUpdateApiService struct {
}

// NewPaymentUpdateApiService creates a default api service
func NewPaymentUpdateApiService() internalApi.PaymentUpdateApiServicer {
	return &PaymentUpdateApiService{}
}

// UpdatePayment - update payment
func (s *PaymentUpdateApiService) UpdatePayment(_ context.Context, payment internalApi.PaymentUpdateDto) (internalApi.ImplResponse, error) {
	// save to db
	/*	var currentPayment models.Payment
		database.DB.Where("id = ?", payment.PaymentId).Find(&currentPayment)

		paymentId, err := uuid.Parse(payment.PaymentId)
		if err != nil {
			return internalApi.ImplResponse{}, err
		}

		status := models.PaymentStatus{
			PaymentId: paymentId,
			PaymentStatus: payment.PaymentStatus,
			PayAmount: payment.PayAmount,
			ActuallyPaid: payment.ActuallyPaid,
			CreatedAt: payment.CreatedAt,
		}

		currentPayment.PaymentStatus = append(currentPayment.PaymentStatus, status)
		currentPayment.UpdatedAt = payment.CreatedAt

		result := database.DB.Save(&currentPayment)
		if result.Error != nil {

		}*/

	// webhookcall
	body := proxyClientApi.WebHookBody{
		Data: proxyClientApi.WebHookData{
			PaymentId:     payment.PaymentId,
			PayAddress:    payment.PayAddress,
			PriceAmount:   payment.PriceAmount,
			PriceCurrency: payment.PriceCurrency,
			PayAmount:     payment.PayAmount,
			PayCurrency:   payment.PayCurrency,
			ActuallyPaid:  *proxyClientApi.NewNullableFloat64(payment.ActuallyPaid),
			PaymentStatus: payment.PaymentStatus,
			CreatedAt:     payment.CreatedAt,
			UpdatedAt:     payment.UpdatedAt,
		},
	}

	mac := hmac.New(sha512.New, []byte("supersecret"))
	data, err := json.Marshal(body.Data)
	_, err = io.WriteString(mac, string(data))
	if err != nil {

	}
	expectedMAC := mac.Sum(nil)
	body.Signature = hex.EncodeToString(expectedMAC)

	webhook := *proxyClientApi.NewWebHookRequestDto("http://localhost:5000/webhook", body)
	configuration := proxyClientApi.NewConfiguration()
	apiClient := proxyClientApi.NewAPIClient(configuration)
	_, err = apiClient.WebhookApi.SendWebhook(context.Background()).WebHookRequestDto(webhook).Execute()
	if err != nil {
		fmt.Println(err)
	}

	return internalApi.Response(http.StatusOK, nil), nil
}
